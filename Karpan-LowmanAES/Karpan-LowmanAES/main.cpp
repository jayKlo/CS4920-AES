//
//  main.cpp
//  Karpan-LowmanAES
//
//  Created by Justin Karpan-Lowman on 4/2/19.
//  Copyright Â© 2019 Justin Karpan-Lowman. All rights reserved.
//
//  Built and compiled in XCode on MacOS Mojave

#include <iostream>
#include <fstream>
using namespace std;

//S-Box matrix
unsigned char sBox[256] =
{
    0x63, 0x7c, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned char rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

//Used for Mixed Columns GF2 multiplication
unsigned char gf2Mix[] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

//Used for Mixed Columns GF3 multiplication
unsigned char gf3Mix[] = {
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

void PrintHex(unsigned char x, fstream &outputFile)
{
    if (x / 16 < 10) outputFile << (char)((x / 16) + '0');
    if (x / 16 >= 10) outputFile << (char)((x / 16 - 10) + 'A');
    if (x % 16 < 10) outputFile << (char)((x % 16) + '0');
    if (x % 16 >= 10) outputFile << (char)((x % 16 - 10) + 'A');
    //Uncomment for nicer printing in file
    //outputFile << " ";
}

void PrintKey(unsigned char* key, fstream &outputFile)
{
    for (int i = 0; i < 4; i++)
    {
        PrintHex(key[i], outputFile);
        outputFile << " ";
        if ((i + 1) % 4 == 0)
        {
            outputFile << "\n";
        }
    }
    
}


void KeyExpansionCore(unsigned char* input, unsigned char i, fstream &outputFile)
{
    
    outputFile << "Key section before RotLeft\n";
    PrintKey(input, outputFile);
    
    //Rotate left
    unsigned int* q = (unsigned int*)input;
    *q = (*q >> 8) | ((*q & 0xff) << 24);
    
    outputFile << "Key section after RotLeft\n";
    PrintKey(input, outputFile);
    
    //S-box four bytes
    for (int j = 0; j < 4; j++)
    {
        input[j] = sBox[input[j]];
    }
    
    outputFile << "Key section after SubstituteBytes\n";
    PrintKey(input, outputFile);
    
    outputFile << "RCon is ";
    PrintHex(rcon[i], outputFile);
    outputFile << "\n";
    
    input[0] ^= rcon[i];
    
    outputFile << "Key section after RCon XOR\n";
    PrintKey(input, outputFile);
    
}

//Key Expansion
void KeyExpansion(unsigned char* inputKey, unsigned char* expandedKeys, fstream &outputFile)
{
    int bytesGenerated = 16;
    int rconIteration = 1;
    unsigned char temp[4];
    
    for (int i = 0; i < 16; i++)
    {
        expandedKeys[i] = inputKey[i];
    }
    
    while (bytesGenerated < 176)
    {
        for (int i = 0; i < 4; i++)
        {
            temp[i] = expandedKeys[i + bytesGenerated - 4];
        }
        if (bytesGenerated % 16 == 0)
        {
            KeyExpansionCore(temp, rconIteration, outputFile);
            rconIteration++;
        }
        for (unsigned char a = 0; a < 4; a++)
        {
            expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ temp[a];
            bytesGenerated++;
        }
    }
    
}

//Substitute Bytes
void SubstituteBytes(unsigned char* state)
{
    //Substitute for s-box
    for (int i = 0; i < 16; i++)
    {
        state[i] = sBox[state[i]];
    }
    
}

//Shift Rows
void ShiftRows(unsigned char* state)
{
    unsigned char temp[16];
    
    //Column 1
    temp[0] = state[0];
    temp[1] = state[5];
    temp[2] = state[10];
    temp[3] = state[15];
    
    //Column 2
    temp[4] = state[4];
    temp[5] = state[9];
    temp[6] = state[14];
    temp[7] = state[3];
    
    //Column 3
    temp[8] = state[8];
    temp[9] = state[13];
    temp[10] = state[2];
    temp[11] = state[7];
    
    //Column 4
    temp[12] = state[12];
    temp[13] = state[1];
    temp[14] = state[6];
    temp[15] = state[11];
    
    for (int i = 0; i < 16; i++)
    {
        state[i] = temp[i];
    }
}

//Mixed Columns
void MixColumns(unsigned char* state)
{
    //Create a new array to store computed values
    unsigned char newMix[16];
    
    //Use GF2, GF3 matrices to xor current state array and compute new values
    newMix[0] = (unsigned char)(gf2Mix[state[0]] ^ gf3Mix[state[1]] ^ state[2] ^ state[3]);
    newMix[1] = (unsigned char)(state[0] ^ gf2Mix[state[1]] ^ gf3Mix[state[2]] ^ state[3]);
    newMix[2] = (unsigned char)(state[0] ^ state[1] ^ gf2Mix[state[2]] ^ gf3Mix[state[3]]);
    newMix[3] = (unsigned char)(gf3Mix[state[0]] ^ state[1] ^ state[2] ^ gf2Mix[state[3]]);
    newMix[4] = (unsigned char)(gf2Mix[state[4]] ^ gf3Mix[state[5]] ^ state[6] ^ state[7]);
    newMix[5] = (unsigned char)(state[4] ^ gf2Mix[state[5]] ^ gf3Mix[state[6]] ^ state[7]);
    newMix[6] = (unsigned char)(state[4] ^ state[5] ^ gf2Mix[state[6]] ^ gf3Mix[state[7]]);
    newMix[7] = (unsigned char)(gf3Mix[state[4]] ^ state[5] ^ state[6] ^ gf2Mix[state[7]]);
    newMix[8] = (unsigned char)(gf2Mix[state[8]] ^ gf3Mix[state[9]] ^ state[10] ^ state[11]);
    newMix[9] = (unsigned char)(state[8] ^ gf2Mix[state[9]] ^ gf3Mix[state[10]] ^ state[11]);
    newMix[10] = (unsigned char)(state[8] ^ state[9] ^ gf2Mix[state[10]] ^ gf3Mix[state[11]]);
    newMix[11] = (unsigned char)(gf3Mix[state[8]] ^ state[9] ^ state[10] ^ gf2Mix[state[11]]);
    newMix[12] = (unsigned char)(gf2Mix[state[12]] ^ gf3Mix[state[13]] ^ state[14] ^ state[15]);
    newMix[13] = (unsigned char)(state[12] ^ gf2Mix[state[13]] ^ gf3Mix[state[14]] ^ state[15]);
    newMix[14] = (unsigned char)(state[12] ^ state[13] ^ gf2Mix[state[14]] ^ gf3Mix[state[15]]);
    newMix[15] = (unsigned char)(gf3Mix[state[12]] ^ state[13] ^ state[14] ^ gf2Mix[state[15]]);
    
    //Copy computed array values to the state array for the round
    for (int i = 0; i < 16; i++)
    {
        state[i] = newMix[i];
    }
}

//Add Round Key
void AddRoundKey(unsigned char* state, unsigned char* roundKey)
{
    //XOR current state with the round key
    for (int i = 0; i < 16; i++)
    {
        state[i] ^= roundKey[i];
    }
}

void PrintCurrentState(unsigned char* state,fstream &outputFile)
{
    
    for (int i = 0; i < 16; i++)
    {
        PrintHex(state[i], outputFile);
        outputFile << " ";
    }
    outputFile << "\n";
    
}

void DisplayExpandedKey(unsigned char* key, fstream &outputFile)
{
    for (int i = 0; i < 176; i++)
    {
        PrintHex(key[i], outputFile);
        outputFile << " ";
        if ((i + 1) % 4 == 0)
        {
            outputFile << "\n";
        }
    }
    
}

//Runs all the steps needed for AES encryption
void AESEncrypt(unsigned char* key, unsigned char* message, fstream &outputFile)
{
    unsigned char state[16];
    for (int i = 0; i < 16; i++)
        state[i] = message[i]; //copy plaintext into state
    int numRounds = 9;
    unsigned char expandedKey[176];
    //Initial Round compute
    KeyExpansion(key, expandedKey, outputFile);
    outputFile << "The expanded key is\n";
    //Print state and print to file
    DisplayExpandedKey(expandedKey, outputFile);
    outputFile << "State before AddRoundKey in initial round\n";
    PrintCurrentState(state, outputFile);
    outputFile << "Round Key for initial round \n";
    PrintCurrentState(key, outputFile);
    AddRoundKey(state, key);
    outputFile << "State after AddRoundKey in initial round \n";
    PrintCurrentState(state, outputFile);
    
    for (int i = 0; i < numRounds; i++)
    {
        outputFile << "State before SubstituteBytes in round " << i << endl;
        PrintCurrentState(state, outputFile);
        
        SubstituteBytes(state);

        outputFile << "State after SubstituteBytes in round " << i << endl;
        PrintCurrentState(state, outputFile);
        
        ShiftRows(state);
        
        outputFile << "State after ShiftRows in round " << i << endl;
        PrintCurrentState(state, outputFile);
        
        MixColumns(state);
        
        outputFile << "State after MixColumns in round " << i << endl;
        PrintCurrentState(state, outputFile);
        
        AddRoundKey(state, expandedKey + (16 * (i + 1)));
        
        outputFile << "The Round Key for round " << i << endl;
        PrintCurrentState(expandedKey + (16 * (1 + i)), outputFile);
        
        outputFile << "State after AddRoundKey in round " << i << endl;
        PrintCurrentState(state, outputFile);
    }
    
    //Final Round (no mix columns)
    SubstituteBytes(state);
    

    outputFile << "State after SubstituteBytes in final round \n";
    PrintCurrentState(state, outputFile);
    
    ShiftRows(state);
    
    outputFile << "State after ShiftRows in final round \n";
    PrintCurrentState(state, outputFile);
    
    AddRoundKey(state, expandedKey + 160);

    outputFile << "Round Key for the final round \n";
    PrintCurrentState(expandedKey + 160, outputFile);
    
    outputFile << "State after AddRoundKey in final round \n";
    PrintCurrentState(state, outputFile);
    
    for (int i = 0; i < 16; i++){
        message[i] = state[i];
    }
}



int main()
{
    fstream outputFile;
    //Change this depending on where you have the results file stored
    outputFile.open("/Users/jayklo/Desktop/Karpan-LowmanAES/Karpan-LowmanAES/results.txt", ios::app);
    
    //Store Key
    //Key: 0f1571c947d9e8591cb7add6af7f6798
    unsigned char key[16] = { 0x0f,0x15,0x71,0xc9,0x47,0xd9,0xe8,0x59,0x1c,0xb7,0xad,0xd6,0xaf,0x7f,0x67,0x98 };
    
    
    //Original Plaintext: 0123456789abcdeffedcba9876543210
    unsigned char message[16] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };
    //changed byte one to 00
    unsigned char message2[16] = { 0x00, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };
    //Changed byte two to 22
    unsigned char message3[16] = { 0x01, 0x22, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };
    //Changed byte three to 46
    unsigned char message4[16] = { 0x01, 0x23, 0x46, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };
    
    outputFile << "\n****** Original Message ******\n";
    AESEncrypt(key, message, outputFile);
    
    outputFile << "\n****** Message 2 ******\n";
    AESEncrypt(key, message2, outputFile);
    
    outputFile << "\n****** Message 3 ******\n";
    AESEncrypt(key, message3, outputFile);
    
    outputFile << "\n****** Message 4 ******\n";
    AESEncrypt(key, message4, outputFile);
    
    int messageLength = strlen((const char*)message); //store length of original message
    int paddedMessageLength = messageLength;
    
    if (paddedMessageLength % 16 != 0){
        paddedMessageLength = (paddedMessageLength / 16 + 1) * 16;
    }
    unsigned char* paddedMessage = new unsigned char[paddedMessageLength];
    for (int i = 0; i < paddedMessageLength; i++)
    {
        if (i >= messageLength){
            paddedMessage[i] = 0;
        }
        else{
            paddedMessage[i] = message[i];
        }
    }
    for (int i = 0; i < paddedMessageLength; i += 16)
        AESEncrypt(key, paddedMessage + i, outputFile);
    
    outputFile << "\nEncrypted Message: \n";
    for (int i = 0; i < paddedMessageLength; i++)
    {
        PrintHex(paddedMessage[i], outputFile);
        outputFile << " ";
    }
    
    delete[] paddedMessage;
    outputFile.close();
    
    return 0;
}



